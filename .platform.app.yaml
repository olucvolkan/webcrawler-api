name: app

type: php:8.4

dependencies:
    php:
        composer/composer: "^2"

runtime:
    extensions:
        - apcu
        - mbstring
        - sodium
        - ctype
        - iconv
        - pdo_pgsql
        - pgsql

variables:
    php:
        opcache.preload: config/preload.php

build:
    flavor: none

disk: 1024

web:
    locations:
        "/":
            root: "public"
            expires: 1h
            passthru: "/index.php"

mounts:
    "/var/cache": { source: local, source_path: var/cache }
    "/var": { source: local, source_path: var }

relationships:
    database: "postgresql:postgresql"
    
hooks:
    build: |
        set -e
        # Ensure we're in production mode
        export APP_ENV=prod
        export APP_DEBUG=0
        export SYMFONY_ENV=prod

        # Install dependencies without dev packages
        composer install --no-dev --optimize-autoloader --no-scripts
        
        # Copy production bundles
        if [ -f "config/bundles.prod.php" ]; then
            cp config/bundles.prod.php config/bundles.php
        fi
        
        # Clear and warmup cache
        php bin/console cache:clear --no-debug --no-warmup
        php bin/console cache:warmup --no-debug

    deploy: |
        set -e
        export APP_ENV=prod
        export APP_DEBUG=0
        export SYMFONY_ENV=prod
        php bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration

workers:
    messenger:
        # PHP background workers usually don't require much CPU. See
        # https://symfony.com/doc/current/cloud/cookbooks/resources_allocation.html
        # for more information
        size: XS
        resources:
            base_memory: 64 # Keep in sync with the `memory-limit` flag value
            memory_ratio: 128
        commands:
            # Consume "async" messages (as configured in the routing section of config/packages/messenger.yaml)
            start: symfony console --time-limit=3600 --memory-limit=64M messenger:consume async

crons:
    security-check:
        # Check that no security issues have been found for PHP packages deployed in production
        spec: '50 23 * * *'
        cmd: if [ "$PLATFORM_ENVIRONMENT_TYPE" = "production" ]; then croncape COMPOSER_ROOT_VERSION=1.0.0 COMPOSER_AUDIT_ABANDONED=ignore composer audit --no-cache; fi
    clean-expired-sessions:
        spec: '17,47 * * * *'
        cmd: croncape php-session-clean
